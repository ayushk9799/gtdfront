# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'frontend' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )
  pod 'GoogleSignIn', '~> 7.0'


  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )
    # Allow non-modular includes and avoid treating warnings as errors for Pods
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'

        # Ensure warnings are not treated as errors even if pods add -Werror
        %w[OTHER_CFLAGS OTHER_CPLUSPLUSFLAGS].each do |flags_key|
          current = config.build_settings[flags_key]
          if current.nil?
            config.build_settings[flags_key] = ['$(inherited)', '-Wno-error', '-Wno-documentation']
          elsif current.is_a?(Array)
            # Keep order so overrides come last
            config.build_settings[flags_key] = current + ['-Wno-error', '-Wno-documentation']
          elsif current.is_a?(String)
            config.build_settings[flags_key] = current + ' -Wno-error -Wno-documentation'
          end
        end
      end
    end
  end
end
